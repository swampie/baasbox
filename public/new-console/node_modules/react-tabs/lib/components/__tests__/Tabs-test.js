'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _reactAddons = require('react/addons');

var _reactAddons2 = _interopRequireDefault(_reactAddons);

var _main = require('../../main');

var _assert = require('assert');

var TestUtils = _reactAddons2['default'].addons.TestUtils;

function createTabs() {
  var props = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var _props$selectedIndex = props.selectedIndex;
  var selectedIndex = _props$selectedIndex === undefined ? 0 : _props$selectedIndex;
  var _props$focus = props.focus;
  var focus = _props$focus === undefined ? false : _props$focus;
  var _props$onSelect = props.onSelect;
  var onSelect = _props$onSelect === undefined ? null : _props$onSelect;
  var _props$forceRenderTabPanel = props.forceRenderTabPanel;
  var forceRenderTabPanel = _props$forceRenderTabPanel === undefined ? false : _props$forceRenderTabPanel;

  return _reactAddons2['default'].createElement(
    _main.Tabs,
    { focus: focus, selectedIndex: selectedIndex, onSelect: onSelect, forceRenderTabPanel: forceRenderTabPanel },
    _reactAddons2['default'].createElement(
      _main.TabList,
      null,
      _reactAddons2['default'].createElement(
        _main.Tab,
        null,
        'Foo'
      ),
      _reactAddons2['default'].createElement(
        _main.Tab,
        null,
        'Bar'
      ),
      _reactAddons2['default'].createElement(
        _main.Tab,
        null,
        _reactAddons2['default'].createElement(
          'a',
          null,
          'Baz'
        )
      ),
      _reactAddons2['default'].createElement(
        _main.Tab,
        { disabled: true },
        'Qux'
      )
    ),
    _reactAddons2['default'].createElement(
      _main.TabPanel,
      null,
      'Hello Foo'
    ),
    _reactAddons2['default'].createElement(
      _main.TabPanel,
      null,
      'Hello Bar'
    ),
    _reactAddons2['default'].createElement(
      _main.TabPanel,
      null,
      'Hello Baz'
    ),
    _reactAddons2['default'].createElement(
      _main.TabPanel,
      null,
      'Hello Qux'
    )
  );
}

function assertTabSelected(tabs, index) {
  (0, _assert.equal)(tabs.getTab(index).getDOMNode().getAttribute('tabindex'), '0');
  (0, _assert.equal)(tabs.getTab(index).getDOMNode().getAttribute('selected'), 'selected');
  (0, _assert.equal)(tabs.getTab(index).getDOMNode().getAttribute('aria-selected'), 'true');
  (0, _assert.equal)(tabs.getTab(index).getDOMNode().getAttribute('aria-expanded'), 'true');
  (0, _assert.equal)(tabs.getPanel(index).getDOMNode().style.display, '');
}

/* eslint func-names:0 */
describe('react-tabs', function () {
  describe('props', function () {
    it('should default to selectedIndex being 0', function () {
      var tabs = TestUtils.renderIntoDocument(createTabs());

      assertTabSelected(tabs, 0);
    });

    it('should honor selectedIndex prop', function () {
      var tabs = TestUtils.renderIntoDocument(createTabs({ selectedIndex: 1 }));

      assertTabSelected(tabs, 1);
    });

    it('should call onSelect when selection changes', function () {
      var called = { index: -1, last: -1 };
      var tabs = TestUtils.renderIntoDocument(createTabs({ onSelect: function onSelect(index, last) {
          called.index = index;
          called.last = last;
        } }));

      tabs.setSelected(2);
      (0, _assert.equal)(called.index, 2);
      (0, _assert.equal)(called.last, 0);
    });
  });

  describe('a11y', function () {
    it('should have appropriate role and aria attributes', function () {
      var tabs = TestUtils.renderIntoDocument(createTabs());

      (0, _assert.equal)(tabs.getTabList().getDOMNode().getAttribute('role'), 'tablist');

      for (var i = 0, l = tabs.getTabsCount(); i < l; i++) {
        var tab = tabs.getTab(i).getDOMNode();
        var panel = tabs.getPanel(i).getDOMNode();

        (0, _assert.equal)(tab.getAttribute('role'), 'tab');
        (0, _assert.equal)(panel.getAttribute('role'), 'tabpanel');

        (0, _assert.equal)(tab.getAttribute('aria-controls'), panel.getAttribute('id'));
        (0, _assert.equal)(panel.getAttribute('aria-labeledby'), tab.getAttribute('id'));
      }

      (0, _assert.equal)(tabs.getTab(3).getDOMNode().getAttribute('aria-disabled'), 'true');
    });
  });

  describe('interaction', function () {
    it('should update selectedIndex when clicked', function () {
      var tabs = TestUtils.renderIntoDocument(createTabs());

      TestUtils.Simulate.click(tabs.getTab(1).getDOMNode());
      assertTabSelected(tabs, 1);
    });

    it('should update selectedIndex when tab child is clicked', function () {
      var tabs = TestUtils.renderIntoDocument(createTabs());

      TestUtils.Simulate.click(tabs.getTab(2).getDOMNode().firstChild);
      assertTabSelected(tabs, 2);
    });

    it('should not change selectedIndex when clicking a disabled tab', function () {
      var tabs = TestUtils.renderIntoDocument(createTabs({ selectedIndex: 0 }));

      TestUtils.Simulate.click(tabs.getTab(3).getDOMNode());
      assertTabSelected(tabs, 0);
    });

    // TODO: Can't seem to make this fail when removing fix :`(
    // See https://github.com/mzabriskie/react-tabs/pull/7
    // it('should preserve selectedIndex when typing', function () {
    //   let App = React.createClass({
    //     handleKeyDown: function () { this.forceUpdate(); },
    //     render: function () {
    //       return (
    //         <Tabs ref="tabs" selectedIndex={1}>
    //           <TabList>
    //             <Tab>First</Tab>
    //             <Tab>Second</Tab>
    //           </TabList>
    //           <TabPanel>1st</TabPanel>
    //           <TabPanel><input onKeyDown={this.handleKeyDown}/></TabPanel>
    //         </Tabs>
    //       );
    //     }
    //   });
    //
    //   let tabs = TestUtils.renderIntoDocument(<App/>).refs.tabs;
    //   let input = tabs.getDOMNode().querySelector('input');
    //
    //   input.focus();
    //   TestUtils.Simulate.keyDown(input, {
    //     keyCode: 'a'.charCodeAt()
    //   });
    //
    //   assertTabSelected(tabs, 1);
    // });
  });

  describe('performance', function () {
    it('should only render the active tab panel', function () {
      var tabs = TestUtils.renderIntoDocument(createTabs());

      (0, _assert.equal)(tabs.getPanel(0).getDOMNode().innerHTML, 'Hello Foo');
      (0, _assert.equal)(tabs.getPanel(1).getDOMNode().innerHTML, '');
      (0, _assert.equal)(tabs.getPanel(2).getDOMNode().innerHTML, '');

      TestUtils.Simulate.click(tabs.getTab(1).getDOMNode());
      (0, _assert.equal)(tabs.getPanel(0).getDOMNode().innerHTML, '');
      (0, _assert.equal)(tabs.getPanel(1).getDOMNode().innerHTML, 'Hello Bar');
      (0, _assert.equal)(tabs.getPanel(2).getDOMNode().innerHTML, '');

      TestUtils.Simulate.click(tabs.getTab(2).getDOMNode());
      (0, _assert.equal)(tabs.getPanel(0).getDOMNode().innerHTML, '');
      (0, _assert.equal)(tabs.getPanel(1).getDOMNode().innerHTML, '');
      (0, _assert.equal)(tabs.getPanel(2).getDOMNode().innerHTML, 'Hello Baz');
    });

    it('should render all tabs if forceRenderTabPanel is true', function () {
      var tabs = TestUtils.renderIntoDocument(createTabs({ forceRenderTabPanel: true }));
      (0, _assert.equal)(tabs.getPanel(0).getDOMNode().innerHTML, 'Hello Foo');
      (0, _assert.equal)(tabs.getPanel(1).getDOMNode().innerHTML, 'Hello Bar');
      (0, _assert.equal)(tabs.getPanel(2).getDOMNode().innerHTML, 'Hello Baz');
    });
  });

  describe('validation', function () {
    it('should result with warning when tabs/panels are imbalanced', function () {
      var tabs = TestUtils.renderIntoDocument(_reactAddons2['default'].createElement(
        _main.Tabs,
        null,
        _reactAddons2['default'].createElement(
          _main.TabList,
          null,
          _reactAddons2['default'].createElement(
            _main.Tab,
            null,
            'Foo'
          )
        )
      ));

      var result = _main.Tabs.propTypes.children(tabs.props, 'children', 'Tabs');
      (0, _assert.ok)(result instanceof Error);
    });

    it('should result with a warning when wrong element is found', function () {
      var tabs = TestUtils.renderIntoDocument(_reactAddons2['default'].createElement(
        _main.Tabs,
        null,
        _reactAddons2['default'].createElement(
          _main.TabList,
          null,
          _reactAddons2['default'].createElement(_main.Tab, null),
          _reactAddons2['default'].createElement('div', null)
        ),
        _reactAddons2['default'].createElement(_main.TabPanel, null)
      ));

      var result = _main.Tabs.propTypes.children(tabs.props, 'children', 'Tabs');
      (0, _assert.ok)(result instanceof Error);
    });

    it('should be okay with rendering without any children', function () {
      var error = false;
      try {
        TestUtils.renderIntoDocument(_reactAddons2['default'].createElement(_main.Tabs, null));
      } catch (e) {
        error = true;
      }

      (0, _assert.ok)(!error);
    });

    it('should be okay with rendering just TabList', function () {
      var error = false;
      try {
        TestUtils.renderIntoDocument(_reactAddons2['default'].createElement(
          _main.Tabs,
          null,
          _reactAddons2['default'].createElement(_main.TabList, null)
        ));
      } catch (e) {
        error = true;
      }

      (0, _assert.ok)(!error);
    });
  });
});